name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:integration

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./test-results/coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella

    - name: Install Playwright dependencies
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  test-coverage-threshold:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check coverage thresholds
      run: npm run test:coverage
      continue-on-error: false

    - name: Comment coverage results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './test-results/coverage/coverage-summary.json';
          
          if (fs.existsSync(path)) {
            const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { lines, branches, functions, statements } = coverage.total;
            
            const comment = `## üìä Test Coverage Report
            
            | Metric | Coverage | Threshold | Status |
            |--------|----------|-----------|--------|
            | Lines | ${lines.pct}% | 80% | ${lines.pct >= 80 ? '‚úÖ' : '‚ùå'} |
            | Branches | ${branches.pct}% | 70% | ${branches.pct >= 70 ? '‚úÖ' : '‚ùå'} |
            | Functions | ${functions.pct}% | 80% | ${functions.pct >= 80 ? '‚úÖ' : '‚ùå'} |
            | Statements | ${statements.pct}% | 80% | ${statements.pct >= 80 ? '‚úÖ' : '‚ùå'} |
            
            ${lines.pct >= 80 && branches.pct >= 70 && functions.pct >= 80 && statements.pct >= 80 
              ? 'üéâ All coverage thresholds passed!' 
              : '‚ö†Ô∏è Some coverage thresholds are below target.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  lint-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check for lint errors
      run: |
        if [ $(npm run lint 2>&1 | grep -c "error\|warning") -gt 0 ]; then
          echo "‚ùå ESLint errors or warnings found"
          exit 1
        else
          echo "‚úÖ No ESLint errors or warnings"
        fi