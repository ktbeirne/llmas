/**
 * Select.test.tsx - Selectコンポーネント単体テスト
 * 
 * Phase 3.5.2.1 Task 3: Selectコンポーネントテスト
 * TypeScript厳密型定義、アクセシビリティ、ドロップダウン機能のテスト
 */\n\nimport React from 'react';\nimport { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\n// テスト対象\nimport Select, { type SelectProps, type SelectOption, type SelectSize, type SelectVariant } from './Select';\n\n// テスト用のオプションデータ\nconst testOptions: SelectOption[] = [\n  { value: 'option1', label: 'オプション1' },\n  { value: 'option2', label: 'オプション2', description: '説明2' },\n  { value: 'option3', label: 'オプション3', disabled: true },\n  { value: 'option4', label: 'オプション4', description: '説明4' },\n];\n\n// テスト用のアイコン付きオプション\nconst TestIcon: React.FC = () => (\n  <svg data-testid=\"test-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n    <circle cx=\"8\" cy=\"8\" r=\"4\" />\n  </svg>\n);\n\nconst testOptionsWithIcons: SelectOption[] = [\n  { value: 'icon1', label: 'アイコン1', icon: <TestIcon /> },\n  { value: 'icon2', label: 'アイコン2', icon: <TestIcon /> },\n];\n\ndescribe('Select Component', () => {\n  describe('基本的なレンダリング', () => {\n    it('デフォルトのpropsで正常にレンダリングされる', () => {\n      render(<Select options={testOptions} data-testid=\"default-select\" />);\n      \n      const select = screen.getByTestId('default-select');\n      expect(select).toBeInTheDocument();\n      expect(select).toHaveAttribute('role', 'combobox');\n      expect(select).toHaveAttribute('aria-expanded', 'false');\n    });\n\n    it('プレースホルダーが正しく表示される', () => {\n      const placeholder = 'カスタムプレースホルダー';\n      render(<Select options={testOptions} placeholder={placeholder} data-testid=\"placeholder-select\" />);\n      \n      expect(screen.getByText(placeholder)).toBeInTheDocument();\n    });\n\n    it('デフォルト値が正しく設定される', () => {\n      render(\n        <Select \n          options={testOptions} \n          defaultValue=\"option2\" \n          data-testid=\"default-value-select\" \n        />\n      );\n      \n      expect(screen.getByText('オプション2')).toBeInTheDocument();\n    });\n  });\n\n  describe('サイズ（size）', () => {\n    const sizes: SelectSize[] = ['sm', 'md', 'lg'];\n\n    sizes.forEach(size => {\n      it(`size=\"${size}\" が正しく適用される`, () => {\n        render(<Select options={testOptions} size={size} data-testid={`${size}-select`} />);\n        \n        const select = screen.getByTestId(`${size}-select`);\n        expect(select).toBeInTheDocument();\n        \n        if (size === 'sm') {\n          expect(select.className).toContain('text-xs');\n        } else if (size === 'lg') {\n          expect(select.className).toContain('text-base');\n        }\n      });\n    });\n  });\n\n  describe('バリアント（variant）', () => {\n    const variants: SelectVariant[] = ['default', 'error', 'success'];\n\n    variants.forEach(variant => {\n      it(`variant=\"${variant}\" が正しく適用される`, () => {\n        render(<Select options={testOptions} variant={variant} data-testid={`${variant}-select`} />);\n        \n        const select = screen.getByTestId(`${variant}-select`);\n        expect(select).toBeInTheDocument();\n        \n        if (variant === 'error') {\n          expect(select.className).toContain('border-red-500');\n          expect(select).toHaveAttribute('aria-invalid', 'true');\n        } else if (variant === 'success') {\n          expect(select.className).toContain('border-green-500');\n        }\n      });\n    });\n  });\n\n  describe('ラベル', () => {\n    it('ラベルが正しく表示される', () => {\n      const label = 'セレクトラベル';\n      render(<Select options={testOptions} label={label} data-testid=\"labeled-select\" />);\n      \n      const labelElement = screen.getByText(label);\n      const select = screen.getByTestId('labeled-select');\n      \n      expect(labelElement).toBeInTheDocument();\n      expect(labelElement).toHaveAttribute('for', select.id);\n    });\n\n    it('required=trueで必須マークが表示される', () => {\n      render(<Select options={testOptions} label=\"必須セレクト\" required data-testid=\"required-select\" />);\n      \n      const requiredMark = screen.getByLabelText('必須');\n      expect(requiredMark).toBeInTheDocument();\n      expect(requiredMark).toHaveTextContent('*');\n    });\n  });\n\n  describe('エラーメッセージ', () => {\n    it('エラーメッセージが正しく表示される', () => {\n      const errorMessage = '選択が必要です';\n      render(<Select options={testOptions} error={errorMessage} data-testid=\"error-select\" />);\n      \n      const select = screen.getByTestId('error-select');\n      const errorElement = screen.getByTestId('error-select-error');\n      \n      expect(errorElement).toBeInTheDocument();\n      expect(errorElement).toHaveTextContent(errorMessage);\n      expect(errorElement).toHaveAttribute('role', 'alert');\n      expect(select).toHaveAttribute('aria-invalid', 'true');\n    });\n\n    it('エラーがある場合はvariantがerrorに変更される', () => {\n      render(<Select options={testOptions} variant=\"success\" error=\"エラーです\" data-testid=\"error-override\" />);\n      \n      const select = screen.getByTestId('error-override');\n      expect(select.className).toContain('border-red-500');\n    });\n  });\n\n  describe('ヘルプテキスト', () => {\n    it('ヘルプテキストが正しく表示される', () => {\n      const helpText = '選択してください';\n      render(<Select options={testOptions} helpText={helpText} data-testid=\"help-select\" />);\n      \n      const helpElement = screen.getByTestId('help-select-help');\n      expect(helpElement).toBeInTheDocument();\n      expect(helpElement).toHaveTextContent(helpText);\n    });\n\n    it('エラーがある場合はヘルプテキストは表示されない', () => {\n      render(\n        <Select \n          options={testOptions}\n          helpText=\"ヘルプテキスト\" \n          error=\"エラーメッセージ\" \n          data-testid=\"error-help-select\"\n        />\n      );\n      \n      expect(screen.queryByText('ヘルプテキスト')).not.toBeInTheDocument();\n      expect(screen.getByText('エラーメッセージ')).toBeInTheDocument();\n    });\n  });\n\n  describe('ドロップダウン操作', () => {\n    it('クリックでドロップダウンが開く', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} data-testid=\"dropdown-select\" />);\n      \n      const select = screen.getByTestId('dropdown-select');\n      expect(select).toHaveAttribute('aria-expanded', 'false');\n      \n      await user.click(select);\n      \n      expect(select).toHaveAttribute('aria-expanded', 'true');\n      expect(screen.getByRole('listbox')).toBeInTheDocument();\n    });\n\n    it('オプションが正しく表示される', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} data-testid=\"options-select\" />);\n      \n      await user.click(screen.getByTestId('options-select'));\n      \n      testOptions.forEach(option => {\n        expect(screen.getByText(option.label)).toBeInTheDocument();\n      });\n    });\n\n    it('オプション選択が正しく動作する', async () => {\n      const handleChange = vi.fn();\n      const user = userEvent.setup();\n      \n      render(<Select options={testOptions} onChange={handleChange} data-testid=\"select-option\" />);\n      \n      await user.click(screen.getByTestId('select-option'));\n      await user.click(screen.getByText('オプション2'));\n      \n      expect(handleChange).toHaveBeenCalledWith('option2', testOptions[1]);\n      expect(screen.getByText('オプション2')).toBeInTheDocument();\n    });\n\n    it('無効なオプションは選択できない', async () => {\n      const handleChange = vi.fn();\n      const user = userEvent.setup();\n      \n      render(<Select options={testOptions} onChange={handleChange} data-testid=\"disabled-option\" />);\n      \n      await user.click(screen.getByTestId('disabled-option'));\n      await user.click(screen.getByText('オプション3'));\n      \n      expect(handleChange).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('キーボードナビゲーション', () => {\n    it('Enterキーでドロップダウンが開く', () => {\n      render(<Select options={testOptions} data-testid=\"keyboard-select\" />);\n      \n      const select = screen.getByTestId('keyboard-select');\n      fireEvent.keyDown(select, { key: 'Enter' });\n      \n      expect(select).toHaveAttribute('aria-expanded', 'true');\n    });\n\n    it('Spaceキーでドロップダウンが開く', () => {\n      render(<Select options={testOptions} data-testid=\"space-select\" />);\n      \n      const select = screen.getByTestId('space-select');\n      fireEvent.keyDown(select, { key: ' ' });\n      \n      expect(select).toHaveAttribute('aria-expanded', 'true');\n    });\n\n    it('Escapeキーでドロップダウンが閉じる', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} data-testid=\"escape-select\" />);\n      \n      const select = screen.getByTestId('escape-select');\n      await user.click(select);\n      expect(select).toHaveAttribute('aria-expanded', 'true');\n      \n      fireEvent.keyDown(select, { key: 'Escape' });\n      expect(select).toHaveAttribute('aria-expanded', 'false');\n    });\n\n    it('ArrowDownキーでドロップダウンが開く', () => {\n      render(<Select options={testOptions} data-testid=\"arrow-select\" />);\n      \n      const select = screen.getByTestId('arrow-select');\n      fireEvent.keyDown(select, { key: 'ArrowDown' });\n      \n      expect(select).toHaveAttribute('aria-expanded', 'true');\n    });\n  });\n\n  describe('検索機能', () => {\n    it('searchable=trueで検索入力が表示される', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} searchable data-testid=\"searchable-select\" />);\n      \n      await user.click(screen.getByTestId('searchable-select'));\n      \n      const searchInput = screen.getByTestId('searchable-select-search');\n      expect(searchInput).toBeInTheDocument();\n    });\n\n    it('検索によりオプションがフィルタリングされる', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} searchable data-testid=\"filter-select\" />);\n      \n      await user.click(screen.getByTestId('filter-select'));\n      \n      const searchInput = screen.getByTestId('filter-select-search');\n      await user.type(searchInput, 'オプション2');\n      \n      expect(screen.getByText('オプション2')).toBeInTheDocument();\n      expect(screen.queryByText('オプション1')).not.toBeInTheDocument();\n    });\n\n    it('検索結果がない場合のメッセージが表示される', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} searchable data-testid=\"no-results-select\" />);\n      \n      await user.click(screen.getByTestId('no-results-select'));\n      \n      const searchInput = screen.getByTestId('no-results-select-search');\n      await user.type(searchInput, '存在しないオプション');\n      \n      expect(screen.getByText('該当する項目がありません')).toBeInTheDocument();\n    });\n  });\n\n  describe('複数選択', () => {\n    it('multiple=trueで複数選択が可能', async () => {\n      const handleMultipleChange = vi.fn();\n      const user = userEvent.setup();\n      \n      render(\n        <Select \n          options={testOptions} \n          multiple \n          onMultipleChange={handleMultipleChange}\n          data-testid=\"multiple-select\" \n        />\n      );\n      \n      await user.click(screen.getByTestId('multiple-select'));\n      await user.click(screen.getByText('オプション1'));\n      \n      expect(handleMultipleChange).toHaveBeenCalledWith(['option1'], expect.any(Array));\n    });\n\n    it('複数選択時の表示が正しく動作する', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <Select \n          options={testOptions} \n          multiple \n          multipleValue={['option1', 'option2']}\n          data-testid=\"multiple-display\" \n        />\n      );\n      \n      expect(screen.getByText('2件選択中')).toBeInTheDocument();\n    });\n  });\n\n  describe('アイコン表示', () => {\n    it('オプションのアイコンが正しく表示される', async () => {\n      const user = userEvent.setup();\n      \n      render(<Select options={testOptionsWithIcons} data-testid=\"icon-select\" />);\n      \n      await user.click(screen.getByTestId('icon-select'));\n      \n      const icons = screen.getAllByTestId('test-icon');\n      expect(icons).toHaveLength(2);\n    });\n  });\n\n  describe('disabled状態', () => {\n    it('disabled=trueでセレクトが無効化される', () => {\n      render(<Select options={testOptions} disabled data-testid=\"disabled-select\" />);\n      \n      const select = screen.getByTestId('disabled-select');\n      expect(select).toHaveAttribute('tabIndex', '-1');\n    });\n\n    it('disabled状態でクリックイベントが発火しない', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} disabled data-testid=\"disabled-click\" />);\n      \n      const select = screen.getByTestId('disabled-click');\n      await user.click(select);\n      \n      expect(select).toHaveAttribute('aria-expanded', 'false');\n    });\n  });\n\n  describe('カスタムレンダリング', () => {\n    it('renderOptionが正しく動作する', async () => {\n      const renderOption = (option: SelectOption, isSelected: boolean) => (\n        <div data-testid={`custom-option-${option.value}`}>\n          カスタム: {option.label} {isSelected && '✓'}\n        </div>\n      );\n      \n      const user = userEvent.setup();\n      \n      render(\n        <Select \n          options={testOptions} \n          renderOption={renderOption}\n          data-testid=\"custom-render\" \n        />\n      );\n      \n      await user.click(screen.getByTestId('custom-render'));\n      \n      expect(screen.getByTestId('custom-option-option1')).toBeInTheDocument();\n      expect(screen.getByText('カスタム: オプション1')).toBeInTheDocument();\n    });\n\n    it('renderSelectedValueが正しく動作する', () => {\n      const renderSelectedValue = (option: SelectOption | null) => (\n        option ? `選択中: ${option.label}` : '未選択'\n      );\n      \n      render(\n        <Select \n          options={testOptions}\n          value=\"option1\"\n          renderSelectedValue={renderSelectedValue}\n          data-testid=\"custom-value\" \n        />\n      );\n      \n      expect(screen.getByText('選択中: オプション1')).toBeInTheDocument();\n    });\n  });\n\n  describe('fullWidth', () => {\n    it('fullWidth=falseで幅が制限される', () => {\n      render(<Select options={testOptions} fullWidth={false} data-testid=\"limited-width\" />);\n      \n      const container = screen.getByTestId('limited-width').parentElement;\n      expect(container?.className).toContain('w-auto');\n    });\n  });\n\n  describe('アクセシビリティ', () => {\n    it('combobox roleが正しく設定される', () => {\n      render(<Select options={testOptions} data-testid=\"a11y-select\" />);\n      \n      const select = screen.getByTestId('a11y-select');\n      expect(select).toHaveAttribute('role', 'combobox');\n    });\n\n    it('aria-expanded属性が正しく設定される', async () => {\n      const user = userEvent.setup();\n      render(<Select options={testOptions} data-testid=\"aria-expanded\" />);\n      \n      const select = screen.getByTestId('aria-expanded');\n      expect(select).toHaveAttribute('aria-expanded', 'false');\n      \n      await user.click(select);\n      expect(select).toHaveAttribute('aria-expanded', 'true');\n    });\n\n    it('aria-required属性が正しく設定される', () => {\n      render(<Select options={testOptions} required data-testid=\"aria-required\" />);\n      \n      const select = screen.getByTestId('aria-required');\n      expect(select).toHaveAttribute('aria-required', 'true');\n    });\n  });\n\n  describe('型安全性', () => {\n    it('SelectPropsの型が正しく適用される', () => {\n      // 型チェックのみ（実行時エラーがないことを確認）\n      const selectProps: SelectProps = {\n        options: testOptions,\n        size: 'lg',\n        variant: 'success',\n        label: 'テストセレクト',\n        placeholder: 'カスタムプレースホルダー',\n        searchable: true,\n        multiple: false,\n        required: true,\n        'data-testid': 'type-safe-select'\n      };\n      \n      render(<Select {...selectProps} />);\n      \n      expect(screen.getByTestId('type-safe-select')).toBeInTheDocument();\n    });\n  });\n});"