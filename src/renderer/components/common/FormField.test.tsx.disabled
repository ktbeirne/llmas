/**
 * FormField.test.tsx - FormFieldコンポーネント単体テスト
 * 
 * Phase 3.5.2.1 Task 4: FormFieldコンポーネントテスト
 * 統合フォームフィールドのテスト（ラベル + 入力 + エラー）
 */

import React from 'react';
import { describe, it, expect, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

// テスト対象
import FormField, { 
  type FormFieldProps, 
  type FormFieldType, 
  type FormFieldLayout, 
  type FormFieldSize 
} from './FormField';

// テスト用のデータ
const testSelectOptions = [
  { value: 'option1', label: 'オプション1' },
  { value: 'option2', label: 'オプション2' },
];

const testRadioOptions = [
  { value: 'radio1', label: 'ラジオ1' },
  { value: 'radio2', label: 'ラジオ2' },
  { value: 'radio3', label: 'ラジオ3', disabled: true },
];

describe('FormField Component', () => {
  describe('基本的なレンダリング', () => {
    it('デフォルトのpropsで正常にレンダリングされる', () => {
      render(
        <FormField 
          type="input" 
          label="テストフィールド"
          data-testid="default-field" 
        />
      );
      
      expect(screen.getByTestId('default-field')).toBeInTheDocument();
      expect(screen.getByText('テストフィールド')).toBeInTheDocument();
      expect(screen.getByTestId('default-field-field')).toBeInTheDocument();
    });

    it('カスタムchildrenが正しく表示される', () => {
      render(
        <FormField 
          label="カスタムフィールド"
          data-testid="custom-field"
        >
          <div data-testid="custom-content">カスタムコンテンツ</div>
        </FormField>
      );
      
      expect(screen.getByTestId('custom-content')).toBeInTheDocument();
      expect(screen.getByText('カスタムコンテンツ')).toBeInTheDocument();
    });
  });\n\n  describe('フィールドタイプ', () => {\n    it('type=\"input\"で入力フィールドがレンダリングされる', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"入力フィールド\"\n          inputProps={{ placeholder: 'テキストを入力' }}\n          data-testid=\"input-field\"\n        />\n      );\n      \n      const input = screen.getByTestId('input-field-field');\n      expect(input).toBeInTheDocument();\n      expect(input).toHaveAttribute('type', 'text');\n      expect(input).toHaveAttribute('placeholder', 'テキストを入力');\n    });\n\n    it('type=\"select\"で選択フィールドがレンダリングされる', () => {\n      render(\n        <FormField \n          type=\"select\"\n          label=\"選択フィールド\"\n          selectProps={{ options: testSelectOptions, placeholder: '選択してください' }}\n          data-testid=\"select-field\"\n        />\n      );\n      \n      const select = screen.getByTestId('select-field-field');\n      expect(select).toBeInTheDocument();\n      expect(select).toHaveAttribute('role', 'combobox');\n      expect(screen.getByText('選択してください')).toBeInTheDocument();\n    });\n\n    it('type=\"textarea\"でテキストエリアがレンダリングされる', () => {\n      render(\n        <FormField \n          type=\"textarea\"\n          label=\"テキストエリア\"\n          textareaProps={{ placeholder: '詳細を入力', rows: 4 }}\n          data-testid=\"textarea-field\"\n        />\n      );\n      \n      const textarea = screen.getByTestId('textarea-field-field');\n      expect(textarea).toBeInTheDocument();\n      expect(textarea.tagName).toBe('TEXTAREA');\n      expect(textarea).toHaveAttribute('placeholder', '詳細を入力');\n      expect(textarea).toHaveAttribute('rows', '4');\n    });\n\n    it('type=\"checkbox\"でチェックボックスがレンダリングされる', () => {\n      render(\n        <FormField \n          type=\"checkbox\"\n          label=\"チェックボックス\"\n          checkboxProps={{ value: 'check1' }}\n          data-testid=\"checkbox-field\"\n        />\n      );\n      \n      const checkbox = screen.getByTestId('checkbox-field-field');\n      expect(checkbox).toBeInTheDocument();\n      expect(checkbox).toHaveAttribute('type', 'checkbox');\n      expect(checkbox).toHaveAttribute('value', 'check1');\n      \n      // チェックボックスの場合、ラベルは横に表示される\n      const label = screen.getByText('チェックボックス');\n      expect(label).toBeInTheDocument();\n    });\n\n    it('type=\"radio\"でラジオボタンがレンダリングされる', () => {\n      render(\n        <FormField \n          type=\"radio\"\n          label=\"ラジオボタン\"\n          options={testRadioOptions}\n          radioProps={{ name: 'test-radio' }}\n          data-testid=\"radio-field\"\n        />\n      );\n      \n      // 各ラジオオプションが表示される\n      testRadioOptions.forEach(option => {\n        expect(screen.getByText(option.label)).toBeInTheDocument();\n      });\n      \n      // 無効なオプションが正しく無効化される\n      const radioInputs = screen.getAllByRole('radio');\n      expect(radioInputs).toHaveLength(3);\n      expect(radioInputs[2]).toBeDisabled(); // 3番目のオプションは無効\n    });\n\n    it('type=\"button\"でボタンがレンダリングされる', () => {\n      const handleClick = vi.fn();\n      \n      render(\n        <FormField \n          type=\"button\"\n          label=\"送信\"\n          buttonProps={{ variant: 'primary', onClick: handleClick }}\n          data-testid=\"button-field\"\n        />\n      );\n      \n      const button = screen.getByRole('button', { name: '送信' });\n      expect(button).toBeInTheDocument();\n      expect(button).toHaveTextContent('送信');\n    });\n  });\n\n  describe('レイアウト', () => {\n    const layouts: FormFieldLayout[] = ['vertical', 'horizontal', 'inline'];\n\n    layouts.forEach(layout => {\n      it(`layout=\"${layout}\" が正しく適用される`, () => {\n        render(\n          <FormField \n            type=\"input\"\n            label=\"レイアウトテスト\"\n            layout={layout}\n            data-testid={`${layout}-field`}\n          />\n        );\n        \n        const field = screen.getByTestId(`${layout}-field`);\n        expect(field).toBeInTheDocument();\n        \n        if (layout === 'vertical') {\n          expect(field.className).toContain('flex-col');\n        } else if (layout === 'horizontal') {\n          expect(field.className).toContain('flex');\n          expect(field.className).toContain('items-start');\n        } else if (layout === 'inline') {\n          expect(field.className).toContain('flex');\n          expect(field.className).toContain('items-center');\n        }\n      });\n    });\n\n    it('horizontalレイアウトでlabelWidthが適用される', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"ラベル幅テスト\"\n          layout=\"horizontal\"\n          labelWidth=\"200px\"\n          data-testid=\"label-width-field\"\n        />\n      );\n      \n      const label = screen.getByText('ラベル幅テスト');\n      expect(label).toHaveStyle({ width: '200px' });\n    });\n  });\n\n  describe('サイズ', () => {\n    const sizes: FormFieldSize[] = ['sm', 'md', 'lg'];\n\n    sizes.forEach(size => {\n      it(`size=\"${size}\" が正しく適用される`, () => {\n        render(\n          <FormField \n            type=\"input\"\n            label=\"サイズテスト\"\n            size={size}\n            data-testid={`${size}-size-field`}\n          />\n        );\n        \n        const input = screen.getByTestId(`${size}-size-field-field`);\n        expect(input).toBeInTheDocument();\n        \n        if (size === 'sm') {\n          expect(input.className).toContain('text-xs');\n        } else if (size === 'lg') {\n          expect(input.className).toContain('text-base');\n        }\n      });\n    });\n  });\n\n  describe('必須フィールド', () => {\n    it('required=trueで必須マークが表示される', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"必須フィールド\"\n          required\n          data-testid=\"required-field\"\n        />\n      );\n      \n      const requiredMark = screen.getByLabelText('必須');\n      expect(requiredMark).toBeInTheDocument();\n      expect(requiredMark).toHaveTextContent('*');\n    });\n\n    it('チェックボックスで必須マークが正しく表示される', () => {\n      render(\n        <FormField \n          type=\"checkbox\"\n          label=\"必須チェック\"\n          required\n          data-testid=\"required-checkbox\"\n        />\n      );\n      \n      const requiredMark = screen.getByLabelText('必須');\n      expect(requiredMark).toBeInTheDocument();\n    });\n  });\n\n  describe('エラーメッセージ', () => {\n    it('エラーメッセージが正しく表示される', () => {\n      const errorMessage = 'このフィールドは必須です';\n      \n      render(\n        <FormField \n          type=\"input\"\n          label=\"エラーフィールド\"\n          error={errorMessage}\n          data-testid=\"error-field\"\n        />\n      );\n      \n      const errorElement = screen.getByTestId('error-field-error');\n      expect(errorElement).toBeInTheDocument();\n      expect(errorElement).toHaveTextContent(errorMessage);\n      expect(errorElement).toHaveAttribute('role', 'alert');\n    });\n\n    it('エラーがある場合はヘルプテキストは表示されない', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"エラーヘルプテスト\"\n          error=\"エラーメッセージ\"\n          helpText=\"ヘルプテキスト\"\n          data-testid=\"error-help-field\"\n        />\n      );\n      \n      expect(screen.getByText('エラーメッセージ')).toBeInTheDocument();\n      expect(screen.queryByText('ヘルプテキスト')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('ヘルプテキスト', () => {\n    it('ヘルプテキストが正しく表示される', () => {\n      const helpText = '半角英数字で入力してください';\n      \n      render(\n        <FormField \n          type=\"input\"\n          label=\"ヘルプフィールド\"\n          helpText={helpText}\n          data-testid=\"help-field\"\n        />\n      );\n      \n      const helpElement = screen.getByTestId('help-field-help');\n      expect(helpElement).toBeInTheDocument();\n      expect(helpElement).toHaveTextContent(helpText);\n    });\n  });\n\n  describe('disabled状態', () => {\n    it('disabled=trueでフィールドが無効化される', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"無効フィールド\"\n          disabled\n          data-testid=\"disabled-field\"\n        />\n      );\n      \n      const input = screen.getByTestId('disabled-field-field');\n      expect(input).toBeDisabled();\n    });\n\n    it('ラジオボタンで個別とグローバルの無効化が正しく動作する', () => {\n      render(\n        <FormField \n          type=\"radio\"\n          label=\"無効ラジオ\"\n          options={testRadioOptions}\n          disabled\n          data-testid=\"disabled-radio\"\n        />\n      );\n      \n      const radioInputs = screen.getAllByRole('radio');\n      radioInputs.forEach(radio => {\n        expect(radio).toBeDisabled();\n      });\n    });\n  });\n\n  describe('fullWidth', () => {\n    it('fullWidth=falseで幅が制限される', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"幅制限フィールド\"\n          fullWidth={false}\n          data-testid=\"limited-width-field\"\n        />\n      );\n      \n      const field = screen.getByTestId('limited-width-field');\n      expect(field.className).toContain('w-auto');\n    });\n  });\n\n  describe('イベントハンドリング', () => {\n    it('入力フィールドでイベントが正しく動作する', async () => {\n      const handleChange = vi.fn();\n      const user = userEvent.setup();\n      \n      render(\n        <FormField \n          type=\"input\"\n          label=\"イベントテスト\"\n          inputProps={{ onChange: handleChange }}\n          data-testid=\"event-field\"\n        />\n      );\n      \n      const input = screen.getByTestId('event-field-field');\n      await user.type(input, 'テスト');\n      \n      expect(handleChange).toHaveBeenCalled();\n    });\n\n    it('チェックボックスでイベントが正しく動作する', async () => {\n      const handleChange = vi.fn();\n      const user = userEvent.setup();\n      \n      render(\n        <FormField \n          type=\"checkbox\"\n          label=\"チェックイベント\"\n          checkboxProps={{ onChange: handleChange }}\n          data-testid=\"checkbox-event\"\n        />\n      );\n      \n      const checkbox = screen.getByTestId('checkbox-event-field');\n      await user.click(checkbox);\n      \n      expect(handleChange).toHaveBeenCalled();\n    });\n\n    it('ボタンでイベントが正しく動作する', async () => {\n      const handleClick = vi.fn();\n      const user = userEvent.setup();\n      \n      render(\n        <FormField \n          type=\"button\"\n          label=\"クリック\"\n          buttonProps={{ onClick: handleClick }}\n          data-testid=\"button-event\"\n        />\n      );\n      \n      const button = screen.getByRole('button', { name: 'クリック' });\n      await user.click(button);\n      \n      expect(handleClick).toHaveBeenCalled();\n    });\n  });\n\n  describe('アクセシビリティ', () => {\n    it('ラベルとフィールドが正しく関連付けられる', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"アクセシブルフィールド\"\n          data-testid=\"accessible-field\"\n        />\n      );\n      \n      const input = screen.getByTestId('accessible-field-field');\n      const label = screen.getByText('アクセシブルフィールド');\n      \n      expect(label).toHaveAttribute('for', input.id);\n    });\n\n    it('エラー状態でaria属性が正しく設定される', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"エラーアクセシビリティ\"\n          error=\"エラーです\"\n          data-testid=\"error-a11y-field\"\n        />\n      );\n      \n      const input = screen.getByTestId('error-a11y-field-field');\n      expect(input).toHaveAttribute('aria-invalid', 'true');\n    });\n  });\n\n  describe('カスタマイズ', () => {\n    it('カスタムクラスが正しく適用される', () => {\n      render(\n        <FormField \n          type=\"input\"\n          label=\"カスタムクラス\"\n          className=\"custom-field\"\n          labelClassName=\"custom-label\"\n          fieldClassName=\"custom-field-container\"\n          errorClassName=\"custom-error\"\n          helpClassName=\"custom-help\"\n          error=\"エラー\"\n          helpText=\"ヘルプ\"\n          data-testid=\"custom-classes\"\n        />\n      );\n      \n      const field = screen.getByTestId('custom-classes');\n      expect(field.className).toContain('custom-field');\n      \n      const label = screen.getByText('カスタムクラス');\n      expect(label.className).toContain('custom-label');\n    });\n  });\n\n  describe('型安全性', () => {\n    it('FormFieldPropsの型が正しく適用される', () => {\n      // 型チェックのみ（実行時エラーがないことを確認）\n      const formFieldProps: FormFieldProps = {\n        type: 'input',\n        label: 'タイプセーフフィールド',\n        layout: 'horizontal',\n        size: 'lg',\n        required: true,\n        fullWidth: false,\n        inputProps: {\n          type: 'email',\n          placeholder: 'example@domain.com'\n        },\n        'data-testid': 'type-safe-field'\n      };\n      \n      render(<FormField {...formFieldProps} />);\n      \n      expect(screen.getByTestId('type-safe-field')).toBeInTheDocument();\n    });\n  });\n});"